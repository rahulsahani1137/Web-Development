
import java.util.*;
 class ImplementQueue{
  
 Stack<Integer> stack = new Stack<Integer>();
 
//The basic push and pop method of a stack are used to create enqueue and dequeue function of a queue
 public void enQueue(int newData){
  stack.add(newData);
 }
 
   //Function to deQueue an item from queue 
  
 public void deQueue(){
   
  // When the stack is empty no element can be dequeued 
  if(stack.size()==0){
   System.out.println("no elements left");
   return;
  }

  if(stack.size()==1){
   System.out.println(stack.pop());
   return;
  }
 

 // pop an item from the stack1 
  int element = stack.pop();
   
// recursive dequeue method
  deQueue();
   
//all the elements will be pushed in the stack in reverse order. Therefore, the order of elements is now same as it would have been in a queue.
  stack.push(element);
 }
} 

public class Source { 
    
 public static void main(String[] args) {
     
   Scanner in=new Scanner(System.in);
   ImplementQueue obj = new ImplementQueue();
   int n=in.nextInt();
   for(int i=0;i<n;i++) {
    obj.enQueue(in.nextInt());   
       
   }  
  obj.deQueue();
  obj.deQueue();
  obj.deQueue();
 }
}



